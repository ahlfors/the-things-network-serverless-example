service: ttn-serverless

provider:
  name: aws
  runtime: python3.6
  environment:
    TTN_KEY: ${env:TTN_KEY}
    DYNAMODB_TABLE: ${env:DYNAMODB_TABLE}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  uplink:
    handler: handler.uplink
    events:
      - http:
          path: uplink
          method: post

  downlink:
    handler: handler.downlink
    events:
      - http:
          path: /devices/{device_id}/downlink
          method: post

  log:
    handler: handler.log
    events:
      - http:
          path: /devices/log
          method: get
          cors: true

resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: payload
            AttributeType: S
          -
            AttributeName: device_id
            AttributeType: S
          -
            AttributeName: createdAt
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
